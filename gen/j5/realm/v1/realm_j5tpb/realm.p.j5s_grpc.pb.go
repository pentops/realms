// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: j5/realm/v1/topic/realm.p.j5s.proto

package realm_j5tpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RealmPublishTopic_RealmEvent_FullMethodName = "/j5.realm.v1.topic.RealmPublishTopic/RealmEvent"
)

// RealmPublishTopicClient is the client API for RealmPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealmPublishTopicClient interface {
	RealmEvent(ctx context.Context, in *RealmEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type realmPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewRealmPublishTopicClient(cc grpc.ClientConnInterface) RealmPublishTopicClient {
	return &realmPublishTopicClient{cc}
}

func (c *realmPublishTopicClient) RealmEvent(ctx context.Context, in *RealmEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RealmPublishTopic_RealmEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealmPublishTopicServer is the server API for RealmPublishTopic service.
// All implementations must embed UnimplementedRealmPublishTopicServer
// for forward compatibility
type RealmPublishTopicServer interface {
	RealmEvent(context.Context, *RealmEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedRealmPublishTopicServer()
}

// UnimplementedRealmPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedRealmPublishTopicServer struct {
}

func (UnimplementedRealmPublishTopicServer) RealmEvent(context.Context, *RealmEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealmEvent not implemented")
}
func (UnimplementedRealmPublishTopicServer) mustEmbedUnimplementedRealmPublishTopicServer() {}

// UnsafeRealmPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealmPublishTopicServer will
// result in compilation errors.
type UnsafeRealmPublishTopicServer interface {
	mustEmbedUnimplementedRealmPublishTopicServer()
}

func RegisterRealmPublishTopicServer(s grpc.ServiceRegistrar, srv RealmPublishTopicServer) {
	s.RegisterService(&RealmPublishTopic_ServiceDesc, srv)
}

func _RealmPublishTopic_RealmEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealmEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealmPublishTopicServer).RealmEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealmPublishTopic_RealmEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealmPublishTopicServer).RealmEvent(ctx, req.(*RealmEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RealmPublishTopic_ServiceDesc is the grpc.ServiceDesc for RealmPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealmPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.realm.v1.topic.RealmPublishTopic",
	HandlerType: (*RealmPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RealmEvent",
			Handler:    _RealmPublishTopic_RealmEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/realm/v1/topic/realm.p.j5s.proto",
}
