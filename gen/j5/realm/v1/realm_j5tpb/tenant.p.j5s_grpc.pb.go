// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: j5/realm/v1/topic/tenant.p.j5s.proto

package realm_j5tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TenantPublishTopic_TenantEvent_FullMethodName = "/j5.realm.v1.topic.TenantPublishTopic/TenantEvent"
)

// TenantPublishTopicClient is the client API for TenantPublishTopic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantPublishTopicClient interface {
	TenantEvent(ctx context.Context, in *TenantEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tenantPublishTopicClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantPublishTopicClient(cc grpc.ClientConnInterface) TenantPublishTopicClient {
	return &tenantPublishTopicClient{cc}
}

func (c *tenantPublishTopicClient) TenantEvent(ctx context.Context, in *TenantEventMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TenantPublishTopic_TenantEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantPublishTopicServer is the server API for TenantPublishTopic service.
// All implementations must embed UnimplementedTenantPublishTopicServer
// for forward compatibility
type TenantPublishTopicServer interface {
	TenantEvent(context.Context, *TenantEventMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedTenantPublishTopicServer()
}

// UnimplementedTenantPublishTopicServer must be embedded to have forward compatible implementations.
type UnimplementedTenantPublishTopicServer struct {
}

func (UnimplementedTenantPublishTopicServer) TenantEvent(context.Context, *TenantEventMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantEvent not implemented")
}
func (UnimplementedTenantPublishTopicServer) mustEmbedUnimplementedTenantPublishTopicServer() {}

// UnsafeTenantPublishTopicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantPublishTopicServer will
// result in compilation errors.
type UnsafeTenantPublishTopicServer interface {
	mustEmbedUnimplementedTenantPublishTopicServer()
}

func RegisterTenantPublishTopicServer(s grpc.ServiceRegistrar, srv TenantPublishTopicServer) {
	s.RegisterService(&TenantPublishTopic_ServiceDesc, srv)
}

func _TenantPublishTopic_TenantEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantPublishTopicServer).TenantEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantPublishTopic_TenantEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantPublishTopicServer).TenantEvent(ctx, req.(*TenantEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantPublishTopic_ServiceDesc is the grpc.ServiceDesc for TenantPublishTopic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantPublishTopic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.realm.v1.topic.TenantPublishTopic",
	HandlerType: (*TenantPublishTopicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantEvent",
			Handler:    _TenantPublishTopic_TenantEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/realm/v1/topic/tenant.p.j5s.proto",
}
