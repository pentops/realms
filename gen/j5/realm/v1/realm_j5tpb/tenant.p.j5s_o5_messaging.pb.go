// Code generated by protoc-gen-go-o5-messaging. DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: j5/realm/v1/topic/tenant.p.j5s.proto

package realm_j5tpb

import (
	context "context"
	messaging_pb "github.com/pentops/o5-messaging/gen/o5/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging/o5msg"
)

// Service: TenantPublishTopic
// Method: TenantEvent

func (msg *TenantEventMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "j5.realm.v1.topic.TenantPublishTopic",
		GrpcMethod:       "TenantEvent",
		Headers:          map[string]string{},
		DestinationTopic: "tenant_publish",
	}
	header.Extension = &messaging_pb.Message_Event_{
		Event: &messaging_pb.Message_Event{
			EntityName: "j5.realm.v1.Tenant",
		},
	}
	return header
}

type TenantPublishTopicTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewTenantPublishTopicTxSender[C any](sender o5msg.TxSender[C]) *TenantPublishTopicTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "j5.realm.v1.topic.TenantPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TenantEvent",
				Message: (*TenantEventMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TenantPublishTopicTxSender[C]{sender: sender}
}

type TenantPublishTopicCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewTenantPublishTopicCollector[C any](collector o5msg.Collector[C]) *TenantPublishTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "j5.realm.v1.topic.TenantPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TenantEvent",
				Message: (*TenantEventMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TenantPublishTopicCollector[C]{collector: collector}
}

type TenantPublishTopicPublisher struct {
	publisher o5msg.Publisher
}

func NewTenantPublishTopicPublisher(publisher o5msg.Publisher) *TenantPublishTopicPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "j5.realm.v1.topic.TenantPublishTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "TenantEvent",
				Message: (*TenantEventMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &TenantPublishTopicPublisher{publisher: publisher}
}

// Method: TenantEvent

func (send TenantPublishTopicTxSender[C]) TenantEvent(ctx context.Context, sendContext C, msg *TenantEventMessage) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect TenantPublishTopicCollector[C]) TenantEvent(sendContext C, msg *TenantEventMessage) {
	collect.collector.Collect(sendContext, msg)
}

func (publish TenantPublishTopicPublisher) TenantEvent(ctx context.Context, msg *TenantEventMessage) error {
	return publish.publisher.Publish(ctx, msg)
}
