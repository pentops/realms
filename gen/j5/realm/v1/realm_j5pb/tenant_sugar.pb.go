// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package realm_j5pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

// TenantEventType is a oneof wrapper
type TenantEventTypeKey string

const (
	TenantEvent_Created TenantEventTypeKey = "created"
	TenantEvent_Updated TenantEventTypeKey = "updated"
)

func (x *TenantEventType) TypeKey() (TenantEventTypeKey, bool) {
	switch x.Type.(type) {
	case *TenantEventType_Created_:
		return TenantEvent_Created, true
	case *TenantEventType_Updated_:
		return TenantEvent_Updated, true
	default:
		return "", false
	}
}

type IsTenantEventTypeWrappedType interface {
	TypeKey() TenantEventTypeKey
}

func (x *TenantEventType) Set(val IsTenantEventTypeWrappedType) {
	switch v := val.(type) {
	case *TenantEventType_Created:
		x.Type = &TenantEventType_Created_{Created: v}
	case *TenantEventType_Updated:
		x.Type = &TenantEventType_Updated_{Updated: v}
	}
}
func (x *TenantEventType) Get() IsTenantEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *TenantEventType_Created_:
		return v.Created
	case *TenantEventType_Updated_:
		return v.Updated
	default:
		return nil
	}
}
func (x *TenantEventType_Created) TypeKey() TenantEventTypeKey {
	return TenantEvent_Created
}
func (x *TenantEventType_Updated) TypeKey() TenantEventTypeKey {
	return TenantEvent_Updated
}

type IsTenantEventType_Type = isTenantEventType_Type

// TenantStatus
const (
	TenantStatus_UNSPECIFIED TenantStatus = 0
	TenantStatus_ACTIVE      TenantStatus = 1
)

var (
	TenantStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
	}
	TenantStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
	}
	TenantStatus_value_either = map[string]int32{
		"UNSPECIFIED":               0,
		"TENANT_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                    1,
		"TENANT_STATUS_ACTIVE":      1,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x TenantStatus) ShortString() string {
	return TenantStatus_name_short[int32(x)]
}
func (x TenantStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *TenantStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := TenantStatus_value_either[strVal]
	*x = TenantStatus(val)
	return nil
}
