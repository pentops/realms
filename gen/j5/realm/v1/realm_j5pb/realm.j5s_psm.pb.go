// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package realm_j5pb

import (
	context "context"
	fmt "fmt"

	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM RealmPSM

type RealmPSM = psm.StateMachine[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
]

type RealmPSMDB = psm.DBStateMachine[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
]

type RealmPSMEventSpec = psm.EventSpec[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
]

type RealmPSMHookBaton = psm.HookBaton[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
]

type RealmPSMFullBaton = psm.CallbackBaton[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
]

type RealmPSMEventKey = string

const (
	RealmPSMEventNil     RealmPSMEventKey = "<nil>"
	RealmPSMEventCreated RealmPSMEventKey = "created"
	RealmPSMEventUpdated RealmPSMEventKey = "updated"
)

// EXTEND RealmKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *RealmKeys) PSMFullName() string {
	return "j5.realm.v1.realm"
}
func (msg *RealmKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"realm_id": msg.RealmId,
	}
	return keyset, nil
}

// EXTEND RealmState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmState) PSMIsSet() bool {
	return msg != nil
}

func (msg *RealmState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *RealmState) PSMKeys() *RealmKeys {
	return msg.Keys
}

func (msg *RealmState) SetStatus(status RealmStatus) {
	msg.Status = status
}

func (msg *RealmState) SetPSMKeys(inner *RealmKeys) {
	msg.Keys = inner
}

func (msg *RealmState) PSMData() *RealmData {
	if msg.Data == nil {
		msg.Data = &RealmData{}
	}
	return msg.Data
}

// EXTEND RealmData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND RealmEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *RealmEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *RealmEvent) PSMKeys() *RealmKeys {
	return msg.Keys
}

func (msg *RealmEvent) SetPSMKeys(inner *RealmKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the RealmPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *RealmEvent) PSMEventKey() RealmPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return RealmPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *RealmEvent) UnwrapPSMEvent() RealmPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *RealmEventType_Created_:
		return v.Created
	case *RealmEventType_Updated_:
		return v.Updated
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *RealmEvent) SetPSMEvent(inner RealmPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &RealmEventType{}
	}
	switch v := inner.(type) {
	case *RealmEventType_Created:
		msg.Event.Type = &RealmEventType_Created_{Created: v}
	case *RealmEventType_Updated:
		msg.Event.Type = &RealmEventType_Updated_{Updated: v}
	default:
		return fmt.Errorf("invalid type %T for RealmEventType", v)
	}
	return nil
}

type RealmPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() RealmPSMEventKey
}

// EXTEND RealmEventType_Created with the RealmPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*RealmEventType_Created) PSMEventKey() RealmPSMEventKey {
	return RealmPSMEventCreated
}

// EXTEND RealmEventType_Updated with the RealmPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*RealmEventType_Updated) PSMEventKey() RealmPSMEventKey {
	return RealmPSMEventUpdated
}

func RealmPSMBuilder() *psm.StateMachineConfig[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{}
}

// RealmPSMMutation runs at the start of a transition to merge the event information into the state data object. The state object is mutable in this context.
func RealmPSMMutation[SE RealmPSMEvent](cb func(*RealmData, SE) error) psm.TransitionMutation[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
	SE,            // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
		SE,            // Specific event type for the transition
	](cb)
}

// RealmPSMLogicHook runs after the mutation is complete. This hook can trigger side effects, including chained events, which are additional events processed by the state machine. Use this for Business Logic which determines the 'next step' in processing.
func RealmPSMLogicHook[
	SE RealmPSMEvent,
](
	cb func(
		context.Context,
		RealmPSMHookBaton,
		*RealmState,
		SE,
	) error) psm.TransitionHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton RealmPSMFullBaton, state *RealmState, event *RealmEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, baton, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// RealmPSMDataHook runs after the mutations, and can be used to update data in tables which are not controlled as the state machine, e.g. for pre-calculating fields for performance reasons. Use of this hook prevents (future) transaction optimizations, as the transaction state when the function is called must needs to match the processing state, but only for this single transition, unlike the GeneralEventDataHook.
func RealmPSMDataHook[
	SE RealmPSMEvent,
](
	cb func(
		context.Context,
		sqrlx.Transaction,
		*RealmData,
		SE,
	) error) psm.TransitionHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton RealmPSMFullBaton, state *RealmState, event *RealmEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, tx, state.PSMData(), asType)
		},
		EventType:   eventType,
		RunOnFollow: true,
	}
}

// RealmPSMLinkHook runs after the mutation and logic hook, and can be used to link the state machine to other state machines in the same database transaction
func RealmPSMLinkHook[
	SE RealmPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		*RealmState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	wrapped := func(ctx context.Context, tx sqrlx.Transaction, state *RealmState, event SE, add func(DK, DIE)) error {
		return cb(ctx, state, event, add)
	}
	return psm.TransitionHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton RealmPSMFullBaton, state *RealmState, event *RealmEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, wrapped, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// RealmPSMLinkDBHook like LinkHook, but has access to the current transaction for reads only (not enforced), use in place of controller logic to look up existing state.
func RealmPSMLinkDBHook[
	SE RealmPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		sqrlx.Transaction,
		*RealmState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton RealmPSMFullBaton, state *RealmState, event *RealmEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, cb, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// RealmPSMGeneralLogicHook runs once per transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, with the state object in the final state after the transition but prior to processing any further events. Chained events are added to the *end* of the event queue for the transaction, and side effects are published (as always) when the transaction is committed. The function MUST be pure, i.e. It MUST NOT produce any side-effects outside of the HookBaton, and MUST NOT modify the state.
func RealmPSMGeneralLogicHook(
	cb func(
		context.Context,
		RealmPSMHookBaton,
		*RealmState,
		*RealmEvent,
	) error) psm.GeneralEventHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton RealmPSMFullBaton,
			state *RealmState,
			event *RealmEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// RealmPSMGeneralStateDataHook runs at the state-machine level regardless of which transition / event is being processed. It runs at-least once before committing a database transaction after multiple transitions are complete. This hook has access only to the final state after the transitions and is used to update other tables based on the resulting state. It MUST be idempotent, it may be called after injecting externally-held state data.
func RealmPSMGeneralStateDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*RealmState,
	) error) psm.GeneralStateHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton RealmPSMFullBaton,
			state *RealmState,
		) error {
			return cb(ctx, tx, state)
		},
		RunOnFollow: true,
	}
}

// RealmPSMGeneralEventDataHook runs after each transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, before any other events are processed. The presence of this hook type prevents (future) transaction optimizations, so should be used sparingly.
func RealmPSMGeneralEventDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*RealmState,
		*RealmEvent,
	) error) psm.GeneralEventHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton RealmPSMFullBaton,
			state *RealmState,
			event *RealmEvent,
		) error {
			return cb(ctx, tx, state, event)
		},
		RunOnFollow: true,
	}
}

// RealmPSMEventPublishHook  EventPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func RealmPSMEventPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*RealmState,
		*RealmEvent,
	) error) psm.GeneralEventHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton RealmPSMFullBaton,
			state *RealmState,
			event *RealmEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// RealmPSMUpsertPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func RealmPSMUpsertPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*RealmState,
	) error) psm.GeneralStateHook[
	*RealmKeys,    // implements psm.IKeyset
	*RealmState,   // implements psm.IState
	RealmStatus,   // implements psm.IStatusEnum
	*RealmData,    // implements psm.IStateData
	*RealmEvent,   // implements psm.IEvent
	RealmPSMEvent, // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*RealmKeys,    // implements psm.IKeyset
		*RealmState,   // implements psm.IState
		RealmStatus,   // implements psm.IStatusEnum
		*RealmData,    // implements psm.IStateData
		*RealmEvent,   // implements psm.IEvent
		RealmPSMEvent, // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton RealmPSMFullBaton,
			state *RealmState,
		) error {
			return cb(ctx, baton, state)
		},
		RunOnFollow: false,
	}
}

func (event *RealmEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
