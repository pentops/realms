// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package realm_j5pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM RealmPSM

type RealmPSM = psm.StateMachine[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
]

type RealmPSMDB = psm.DBStateMachine[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
]

type RealmPSMEventSpec = psm.EventSpec[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
]

type RealmPSMEventKey = string

const (
	RealmPSMEventNil     RealmPSMEventKey = "<nil>"
	RealmPSMEventCreated RealmPSMEventKey = "created"
	RealmPSMEventUpdated RealmPSMEventKey = "updated"
)

// EXTEND RealmKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *RealmKeys) PSMFullName() string {
	return "j5.realm.v1.realm"
}
func (msg *RealmKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"realm_id": msg.RealmId,
	}
	return keyset, nil
}

// EXTEND RealmState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmState) PSMIsSet() bool {
	return msg != nil
}

func (msg *RealmState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *RealmState) PSMKeys() *RealmKeys {
	return msg.Keys
}

func (msg *RealmState) SetStatus(status RealmStatus) {
	msg.Status = status
}

func (msg *RealmState) SetPSMKeys(inner *RealmKeys) {
	msg.Keys = inner
}

func (msg *RealmState) PSMData() *RealmStateData {
	if msg.Data == nil {
		msg.Data = &RealmStateData{}
	}
	return msg.Data
}

// EXTEND RealmStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND RealmEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *RealmEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *RealmEvent) PSMKeys() *RealmKeys {
	return msg.Keys
}

func (msg *RealmEvent) SetPSMKeys(inner *RealmKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the RealmPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *RealmEvent) PSMEventKey() RealmPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return RealmPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *RealmEvent) UnwrapPSMEvent() RealmPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *RealmEventType_Created_:
		return v.Created
	case *RealmEventType_Updated_:
		return v.Updated
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *RealmEvent) SetPSMEvent(inner RealmPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &RealmEventType{}
	}
	switch v := inner.(type) {
	case *RealmEventType_Created:
		msg.Event.Type = &RealmEventType_Created_{Created: v}
	case *RealmEventType_Updated:
		msg.Event.Type = &RealmEventType_Updated_{Updated: v}
	default:
		return fmt.Errorf("invalid type %T for RealmEventType", v)
	}
	return nil
}

type RealmPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() RealmPSMEventKey
}

// EXTEND RealmEventType_Created with the RealmPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*RealmEventType_Created) PSMEventKey() RealmPSMEventKey {
	return RealmPSMEventCreated
}

// EXTEND RealmEventType_Updated with the RealmPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *RealmEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*RealmEventType_Updated) PSMEventKey() RealmPSMEventKey {
	return RealmPSMEventUpdated
}

func RealmPSMBuilder() *psm.StateMachineConfig[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
	]{}
}

func RealmPSMMutation[SE RealmPSMEvent](cb func(*RealmStateData, SE) error) psm.TransitionMutation[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}

type RealmPSMHookBaton = psm.HookBaton[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
]

func RealmPSMLogicHook[SE RealmPSMEvent](cb func(context.Context, RealmPSMHookBaton, *RealmState, SE) error) psm.TransitionLogicHook[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionLogicHook[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}
func RealmPSMDataHook[SE RealmPSMEvent](cb func(context.Context, sqrlx.Transaction, *RealmState, SE) error) psm.TransitionDataHook[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionDataHook[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}
func RealmPSMLinkHook[SE RealmPSMEvent, DK psm.IKeyset, DIE psm.IInnerEvent](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(context.Context, *RealmState, SE, func(DK, DIE)) error,
) psm.LinkHook[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
	DK,              // Destination Keys
	DIE,             // Destination Inner Event
] {
	return psm.LinkHook[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
		DK,              // Destination Keys
		DIE,             // Destination Inner Event
	]{
		Derive:      cb,
		Destination: linkDestination,
	}
}
func RealmPSMGeneralLogicHook(cb func(context.Context, RealmPSMHookBaton, *RealmState, *RealmEvent) error) psm.GeneralLogicHook[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralLogicHook[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func RealmPSMGeneralStateDataHook(cb func(context.Context, sqrlx.Transaction, *RealmState) error) psm.GeneralStateDataHook[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateDataHook[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func RealmPSMGeneralEventDataHook(cb func(context.Context, sqrlx.Transaction, *RealmState, *RealmEvent) error) psm.GeneralEventDataHook[
	*RealmKeys,      // implements psm.IKeyset
	*RealmState,     // implements psm.IState
	RealmStatus,     // implements psm.IStatusEnum
	*RealmStateData, // implements psm.IStateData
	*RealmEvent,     // implements psm.IEvent
	RealmPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventDataHook[
		*RealmKeys,      // implements psm.IKeyset
		*RealmState,     // implements psm.IState
		RealmStatus,     // implements psm.IStatusEnum
		*RealmStateData, // implements psm.IStateData
		*RealmEvent,     // implements psm.IEvent
		RealmPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
