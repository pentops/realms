// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package realm_j5pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM TenantPSM

type TenantPSM = psm.StateMachine[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
]

type TenantPSMDB = psm.DBStateMachine[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
]

type TenantPSMEventSpec = psm.EventSpec[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
]

type TenantPSMEventKey = string

const (
	TenantPSMEventNil     TenantPSMEventKey = "<nil>"
	TenantPSMEventCreated TenantPSMEventKey = "created"
	TenantPSMEventUpdated TenantPSMEventKey = "updated"
)

// EXTEND TenantKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TenantKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *TenantKeys) PSMFullName() string {
	return "j5.realm.v1.tenant"
}
func (msg *TenantKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"tenant_id":   msg.TenantId,
		"realm_id":    msg.RealmId,
		"tenant_type": msg.TenantType,
	}
	return keyset, nil
}

// EXTEND TenantState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TenantState) PSMIsSet() bool {
	return msg != nil
}

func (msg *TenantState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *TenantState) PSMKeys() *TenantKeys {
	return msg.Keys
}

func (msg *TenantState) SetStatus(status TenantStatus) {
	msg.Status = status
}

func (msg *TenantState) SetPSMKeys(inner *TenantKeys) {
	msg.Keys = inner
}

func (msg *TenantState) PSMData() *TenantStateData {
	if msg.Data == nil {
		msg.Data = &TenantStateData{}
	}
	return msg.Data
}

// EXTEND TenantStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TenantStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND TenantEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TenantEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *TenantEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *TenantEvent) PSMKeys() *TenantKeys {
	return msg.Keys
}

func (msg *TenantEvent) SetPSMKeys(inner *TenantKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the TenantPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *TenantEvent) PSMEventKey() TenantPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return TenantPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *TenantEvent) UnwrapPSMEvent() TenantPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *TenantEventType_Created_:
		return v.Created
	case *TenantEventType_Updated_:
		return v.Updated
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *TenantEvent) SetPSMEvent(inner TenantPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &TenantEventType{}
	}
	switch v := inner.(type) {
	case *TenantEventType_Created:
		msg.Event.Type = &TenantEventType_Created_{Created: v}
	case *TenantEventType_Updated:
		msg.Event.Type = &TenantEventType_Updated_{Updated: v}
	default:
		return fmt.Errorf("invalid type %T for TenantEventType", v)
	}
	return nil
}

type TenantPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() TenantPSMEventKey
}

// EXTEND TenantEventType_Created with the TenantPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TenantEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*TenantEventType_Created) PSMEventKey() TenantPSMEventKey {
	return TenantPSMEventCreated
}

// EXTEND TenantEventType_Updated with the TenantPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *TenantEventType_Updated) PSMIsSet() bool {
	return msg != nil
}

func (*TenantEventType_Updated) PSMEventKey() TenantPSMEventKey {
	return TenantPSMEventUpdated
}

func TenantPSMBuilder() *psm.StateMachineConfig[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
	]{}
}

func TenantPSMMutation[SE TenantPSMEvent](cb func(*TenantStateData, SE) error) psm.TransitionMutation[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
	SE,               // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
		SE,               // Specific event type for the transition
	](cb)
}

type TenantPSMHookBaton = psm.HookBaton[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
]

func TenantPSMLogicHook[SE TenantPSMEvent](cb func(context.Context, TenantPSMHookBaton, *TenantState, SE) error) psm.TransitionLogicHook[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
	SE,               // Specific event type for the transition
] {
	return psm.TransitionLogicHook[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
		SE,               // Specific event type for the transition
	](cb)
}
func TenantPSMDataHook[SE TenantPSMEvent](cb func(context.Context, sqrlx.Transaction, *TenantState, SE) error) psm.TransitionDataHook[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
	SE,               // Specific event type for the transition
] {
	return psm.TransitionDataHook[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
		SE,               // Specific event type for the transition
	](cb)
}
func TenantPSMLinkHook[SE TenantPSMEvent, DK psm.IKeyset, DIE psm.IInnerEvent](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(context.Context, *TenantState, SE, func(DK, DIE)) error,
) psm.LinkHook[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
	SE,               // Specific event type for the transition
	DK,               // Destination Keys
	DIE,              // Destination Inner Event
] {
	return psm.LinkHook[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
		SE,               // Specific event type for the transition
		DK,               // Destination Keys
		DIE,              // Destination Inner Event
	]{
		Derive:      cb,
		Destination: linkDestination,
	}
}
func TenantPSMGeneralLogicHook(cb func(context.Context, TenantPSMHookBaton, *TenantState, *TenantEvent) error) psm.GeneralLogicHook[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralLogicHook[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func TenantPSMGeneralStateDataHook(cb func(context.Context, sqrlx.Transaction, *TenantState) error) psm.GeneralStateDataHook[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateDataHook[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func TenantPSMGeneralEventDataHook(cb func(context.Context, sqrlx.Transaction, *TenantState, *TenantEvent) error) psm.GeneralEventDataHook[
	*TenantKeys,      // implements psm.IKeyset
	*TenantState,     // implements psm.IState
	TenantStatus,     // implements psm.IStatusEnum
	*TenantStateData, // implements psm.IStateData
	*TenantEvent,     // implements psm.IEvent
	TenantPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventDataHook[
		*TenantKeys,      // implements psm.IKeyset
		*TenantState,     // implements psm.IState
		TenantStatus,     // implements psm.IStatusEnum
		*TenantStateData, // implements psm.IStateData
		*TenantEvent,     // implements psm.IEvent
		TenantPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
