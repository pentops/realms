// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: j5/realm/v1/service/auth.p.j5s.proto

package realm_j5spb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ApiAuthService_Whoami_FullMethodName   = "/j5.realm.v1.service.ApiAuthService/Whoami"
	ApiAuthService_GetToken_FullMethodName = "/j5.realm.v1.service.ApiAuthService/GetToken"
)

// ApiAuthServiceClient is the client API for ApiAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiAuthServiceClient interface {
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
}

type apiAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiAuthServiceClient(cc grpc.ClientConnInterface) ApiAuthServiceClient {
	return &apiAuthServiceClient{cc}
}

func (c *apiAuthServiceClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*WhoamiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhoamiResponse)
	err := c.cc.Invoke(ctx, ApiAuthService_Whoami_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiAuthServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, ApiAuthService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiAuthServiceServer is the server API for ApiAuthService service.
// All implementations must embed UnimplementedApiAuthServiceServer
// for forward compatibility
type ApiAuthServiceServer interface {
	Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	mustEmbedUnimplementedApiAuthServiceServer()
}

// UnimplementedApiAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiAuthServiceServer struct {
}

func (UnimplementedApiAuthServiceServer) Whoami(context.Context, *WhoamiRequest) (*WhoamiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whoami not implemented")
}
func (UnimplementedApiAuthServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedApiAuthServiceServer) mustEmbedUnimplementedApiAuthServiceServer() {}

// UnsafeApiAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiAuthServiceServer will
// result in compilation errors.
type UnsafeApiAuthServiceServer interface {
	mustEmbedUnimplementedApiAuthServiceServer()
}

func RegisterApiAuthServiceServer(s grpc.ServiceRegistrar, srv ApiAuthServiceServer) {
	s.RegisterService(&ApiAuthService_ServiceDesc, srv)
}

func _ApiAuthService_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAuthServiceServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiAuthService_Whoami_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAuthServiceServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiAuthService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiAuthServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiAuthService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiAuthServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiAuthService_ServiceDesc is the grpc.ServiceDesc for ApiAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.realm.v1.service.ApiAuthService",
	HandlerType: (*ApiAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Whoami",
			Handler:    _ApiAuthService_Whoami_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _ApiAuthService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/realm/v1/service/auth.p.j5s.proto",
}
