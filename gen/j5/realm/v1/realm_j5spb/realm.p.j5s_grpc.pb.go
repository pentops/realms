// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: j5/realm/v1/service/realm.p.j5s.proto

package realm_j5spb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RealmQueryService_RealmGet_FullMethodName    = "/j5.realm.v1.service.RealmQueryService/RealmGet"
	RealmQueryService_RealmList_FullMethodName   = "/j5.realm.v1.service.RealmQueryService/RealmList"
	RealmQueryService_RealmEvents_FullMethodName = "/j5.realm.v1.service.RealmQueryService/RealmEvents"
)

// RealmQueryServiceClient is the client API for RealmQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealmQueryServiceClient interface {
	RealmGet(ctx context.Context, in *RealmGetRequest, opts ...grpc.CallOption) (*RealmGetResponse, error)
	RealmList(ctx context.Context, in *RealmListRequest, opts ...grpc.CallOption) (*RealmListResponse, error)
	RealmEvents(ctx context.Context, in *RealmEventsRequest, opts ...grpc.CallOption) (*RealmEventsResponse, error)
}

type realmQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealmQueryServiceClient(cc grpc.ClientConnInterface) RealmQueryServiceClient {
	return &realmQueryServiceClient{cc}
}

func (c *realmQueryServiceClient) RealmGet(ctx context.Context, in *RealmGetRequest, opts ...grpc.CallOption) (*RealmGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealmGetResponse)
	err := c.cc.Invoke(ctx, RealmQueryService_RealmGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realmQueryServiceClient) RealmList(ctx context.Context, in *RealmListRequest, opts ...grpc.CallOption) (*RealmListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealmListResponse)
	err := c.cc.Invoke(ctx, RealmQueryService_RealmList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realmQueryServiceClient) RealmEvents(ctx context.Context, in *RealmEventsRequest, opts ...grpc.CallOption) (*RealmEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealmEventsResponse)
	err := c.cc.Invoke(ctx, RealmQueryService_RealmEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealmQueryServiceServer is the server API for RealmQueryService service.
// All implementations must embed UnimplementedRealmQueryServiceServer
// for forward compatibility
type RealmQueryServiceServer interface {
	RealmGet(context.Context, *RealmGetRequest) (*RealmGetResponse, error)
	RealmList(context.Context, *RealmListRequest) (*RealmListResponse, error)
	RealmEvents(context.Context, *RealmEventsRequest) (*RealmEventsResponse, error)
	mustEmbedUnimplementedRealmQueryServiceServer()
}

// UnimplementedRealmQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRealmQueryServiceServer struct {
}

func (UnimplementedRealmQueryServiceServer) RealmGet(context.Context, *RealmGetRequest) (*RealmGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealmGet not implemented")
}
func (UnimplementedRealmQueryServiceServer) RealmList(context.Context, *RealmListRequest) (*RealmListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealmList not implemented")
}
func (UnimplementedRealmQueryServiceServer) RealmEvents(context.Context, *RealmEventsRequest) (*RealmEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealmEvents not implemented")
}
func (UnimplementedRealmQueryServiceServer) mustEmbedUnimplementedRealmQueryServiceServer() {}

// UnsafeRealmQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealmQueryServiceServer will
// result in compilation errors.
type UnsafeRealmQueryServiceServer interface {
	mustEmbedUnimplementedRealmQueryServiceServer()
}

func RegisterRealmQueryServiceServer(s grpc.ServiceRegistrar, srv RealmQueryServiceServer) {
	s.RegisterService(&RealmQueryService_ServiceDesc, srv)
}

func _RealmQueryService_RealmGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealmGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealmQueryServiceServer).RealmGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealmQueryService_RealmGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealmQueryServiceServer).RealmGet(ctx, req.(*RealmGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealmQueryService_RealmList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealmListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealmQueryServiceServer).RealmList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealmQueryService_RealmList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealmQueryServiceServer).RealmList(ctx, req.(*RealmListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealmQueryService_RealmEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealmEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealmQueryServiceServer).RealmEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealmQueryService_RealmEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealmQueryServiceServer).RealmEvents(ctx, req.(*RealmEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealmQueryService_ServiceDesc is the grpc.ServiceDesc for RealmQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealmQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.realm.v1.service.RealmQueryService",
	HandlerType: (*RealmQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RealmGet",
			Handler:    _RealmQueryService_RealmGet_Handler,
		},
		{
			MethodName: "RealmList",
			Handler:    _RealmQueryService_RealmList_Handler,
		},
		{
			MethodName: "RealmEvents",
			Handler:    _RealmQueryService_RealmEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/realm/v1/service/realm.p.j5s.proto",
}
