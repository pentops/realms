// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: j5/realm/v1/service/tenant.p.j5s.proto

package realm_j5spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TenantQueryService_TenantGet_FullMethodName    = "/j5.realm.v1.service.TenantQueryService/TenantGet"
	TenantQueryService_TenantList_FullMethodName   = "/j5.realm.v1.service.TenantQueryService/TenantList"
	TenantQueryService_TenantEvents_FullMethodName = "/j5.realm.v1.service.TenantQueryService/TenantEvents"
)

// TenantQueryServiceClient is the client API for TenantQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantQueryServiceClient interface {
	TenantGet(ctx context.Context, in *TenantGetRequest, opts ...grpc.CallOption) (*TenantGetResponse, error)
	TenantList(ctx context.Context, in *TenantListRequest, opts ...grpc.CallOption) (*TenantListResponse, error)
	TenantEvents(ctx context.Context, in *TenantEventsRequest, opts ...grpc.CallOption) (*TenantEventsResponse, error)
}

type tenantQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantQueryServiceClient(cc grpc.ClientConnInterface) TenantQueryServiceClient {
	return &tenantQueryServiceClient{cc}
}

func (c *tenantQueryServiceClient) TenantGet(ctx context.Context, in *TenantGetRequest, opts ...grpc.CallOption) (*TenantGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantGetResponse)
	err := c.cc.Invoke(ctx, TenantQueryService_TenantGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantQueryServiceClient) TenantList(ctx context.Context, in *TenantListRequest, opts ...grpc.CallOption) (*TenantListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantListResponse)
	err := c.cc.Invoke(ctx, TenantQueryService_TenantList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantQueryServiceClient) TenantEvents(ctx context.Context, in *TenantEventsRequest, opts ...grpc.CallOption) (*TenantEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantEventsResponse)
	err := c.cc.Invoke(ctx, TenantQueryService_TenantEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantQueryServiceServer is the server API for TenantQueryService service.
// All implementations must embed UnimplementedTenantQueryServiceServer
// for forward compatibility
type TenantQueryServiceServer interface {
	TenantGet(context.Context, *TenantGetRequest) (*TenantGetResponse, error)
	TenantList(context.Context, *TenantListRequest) (*TenantListResponse, error)
	TenantEvents(context.Context, *TenantEventsRequest) (*TenantEventsResponse, error)
	mustEmbedUnimplementedTenantQueryServiceServer()
}

// UnimplementedTenantQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantQueryServiceServer struct {
}

func (UnimplementedTenantQueryServiceServer) TenantGet(context.Context, *TenantGetRequest) (*TenantGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantGet not implemented")
}
func (UnimplementedTenantQueryServiceServer) TenantList(context.Context, *TenantListRequest) (*TenantListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantList not implemented")
}
func (UnimplementedTenantQueryServiceServer) TenantEvents(context.Context, *TenantEventsRequest) (*TenantEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantEvents not implemented")
}
func (UnimplementedTenantQueryServiceServer) mustEmbedUnimplementedTenantQueryServiceServer() {}

// UnsafeTenantQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantQueryServiceServer will
// result in compilation errors.
type UnsafeTenantQueryServiceServer interface {
	mustEmbedUnimplementedTenantQueryServiceServer()
}

func RegisterTenantQueryServiceServer(s grpc.ServiceRegistrar, srv TenantQueryServiceServer) {
	s.RegisterService(&TenantQueryService_ServiceDesc, srv)
}

func _TenantQueryService_TenantGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantQueryServiceServer).TenantGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantQueryService_TenantGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantQueryServiceServer).TenantGet(ctx, req.(*TenantGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantQueryService_TenantList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantQueryServiceServer).TenantList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantQueryService_TenantList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantQueryServiceServer).TenantList(ctx, req.(*TenantListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantQueryService_TenantEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantQueryServiceServer).TenantEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantQueryService_TenantEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantQueryServiceServer).TenantEvents(ctx, req.(*TenantEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantQueryService_ServiceDesc is the grpc.ServiceDesc for TenantQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "j5.realm.v1.service.TenantQueryService",
	HandlerType: (*TenantQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantGet",
			Handler:    _TenantQueryService_TenantGet_Handler,
		},
		{
			MethodName: "TenantList",
			Handler:    _TenantQueryService_TenantList_Handler,
		},
		{
			MethodName: "TenantEvents",
			Handler:    _TenantQueryService_TenantEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "j5/realm/v1/service/tenant.p.j5s.proto",
}
